package se.lexicon.market.component.event;

import com.gigaspaces.annotation.pojo.SpaceClass;
import com.gigaspaces.annotation.pojo.SpaceFifoGroupingProperty;
import com.gigaspaces.annotation.pojo.SpaceId;
import com.gigaspaces.annotation.pojo.SpaceRouting;
import com.so4it.annotation.Allowed;
import com.so4it.common.util.object.Required;
import com.so4it.component.entity.AbstractEntityBuilder;
import com.so4it.component.entity.IdEntity;

import se.lexicon.market.component.domain.MarketOrder;


/**
 *
 * @author Magnus Poromaa {@literal <mailto:magnus.poromaa@so4it.com/>}
 */
@SpaceClass
public class PlaceMarketOrderEvent extends IdEntity<String> {

    @Allowed(value = "Auto generated by GS", types = {Allowed.Type.NULLABLE})
    private String id;

    private String instrument;

    private MarketOrder marketOrder;

    private Integer counter;

    private PlaceMarketOrderEvent() {
    }

    private PlaceMarketOrderEvent(Builder builder) {
        this.id = builder.id;
        this.instrument = Required.notNull(builder.instrument,"instrument",builder.isTemplate());
        this.marketOrder = Required.notNull(builder.marketOrder,"marketOrder",builder.isTemplate());
        this.counter = Required.notNull(builder.counter,"counter",builder.isTemplate());
    }

    @Override
    @SpaceId(autoGenerate = true)
    public String getId() {
        return id;
    }

    private void setId(String id) {
        this.id = id;
    }

    @SpaceRouting
    @SpaceFifoGroupingProperty
    public String getInstrument() { return instrument; }

    private void setInstrument(String instrument) { this.instrument = instrument; }

    public MarketOrder getMarketOrderEntity() {
        return marketOrder;
    }

    private void setOrderEntity(MarketOrder marketOrderEntity) {
        this.marketOrder = marketOrder;
    }

    public Integer getCounter() {
        return counter;
    }

    private void setCounter(Integer counter) {
        this.counter = counter;
    }

    public static Builder builder() {
        return new Builder(false);
    }

    public static Builder templateBuilder() {
        return new Builder(true);
    }


    public static class Builder extends AbstractEntityBuilder<PlaceMarketOrderEvent> {

        private String id;

        private String instrument;

        private MarketOrder marketOrder;

        private Integer counter;

        public Builder(boolean template) {
            super(template);
        }

        public PlaceMarketOrderEvent.Builder withId(String id) {
            this.id = id;
            return this;
        }

        public PlaceMarketOrderEvent.Builder withInstrument(String instrument) {
            this.instrument = instrument;
            return this;
        }

        public PlaceMarketOrderEvent.Builder withOrder(MarketOrder marketOrder) {
            this.marketOrder = marketOrder;
            return this;
        }

        public PlaceMarketOrderEvent.Builder withCounter(Integer counter) {
            this.counter = counter;
            return this;
        }


        @Override
        public PlaceMarketOrderEvent build() {
            return new PlaceMarketOrderEvent(this);
        }
    }
}
